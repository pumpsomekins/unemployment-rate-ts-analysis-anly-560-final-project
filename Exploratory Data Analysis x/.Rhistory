model <- lm(unemploymentR_us ~ realDI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
grangertest(unemploymentR_us ~ grossDP_us, order = 2)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ ., order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
# Estimate the ARIMAX model
model <- arima(data_unemployment, order = c(1, 1, 1), xreg = data_gdp)
View(unemploymentR_us)
View(grossDP_us)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
merged_test <- merge(unemploymentR_us, grossDP_us, by = "DATE", all = TRUE)
View(merged_test)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
merged_test <- merge(unemploymentR_us, grossDP_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
merged_test <- merge(unemploymentR_us, grossDP_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
merged_test <- merge(unemploymentR_us, consumerPI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
grangertest(unemploymentR_us ~ grossDP_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ RATE, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ consumerPI_us, order = 2, data = merged_data[, -1])
grangertest(unemploymentR_us ~ realDI_us, order = 2, data = merged_data[, -1])
merged_test <- merge(unemploymentR_us, realDI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
View(merged_data)
model <- lm(unemploymentR_us ~ consumerPI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ grossDP_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
View(merged_data)
model <- lm(unemploymentR_us ~ grossDP_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ consumerPI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ RATE, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ realDI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ ., data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ grossDP_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print("This result is for GDP")
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ consumerPI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print("This result is for consumer price index")
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ RATE, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print("This result is for consumer price index rate")
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ realDI_us, data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print("This result is for real disposable income")
print(rainbow_test_result)
model <- lm(unemploymentR_us ~ ., data = merged_data[, -1])
# Perform the Rainbow Test
rainbow_test_result <- raintest(model)
# Display the test result
print("This result is for all the data acting together")
print(rainbow_test_result)
merged_test <- merge(unemploymentR_us, realDI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs real disposable income")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
merged_test <- merge(unemploymentR_us, grossDP_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs GDP")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
merged_test <- merge(unemploymentR_us, consumerPI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs consumer price index")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
merged_test <- merge(unemploymentR_us, RATE, by = "DATE", all = TRUE)
View(merged_test)
merged_test <- merge(unemploymentR_us, realDI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs real disposable income")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
merged_test <- merge(unemploymentR_us, grossDP_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs GDP")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
merged_test <- merge(unemploymentR_us, consumerPI_us, by = "DATE", all = TRUE)
merged_test <- na.omit(merged_test)
print("This result is for unemployment rate vs consumer price index")
grangertest(DATA.x ~ DATA.y, order = 2, data = merged_test)
print("This result is for unemployment rate vs consumer price index rate")
grangertest(DATA.x ~ RATE, order = 2, data = merged_test)
View(adf_cpi)
View(consumerPI_us)
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Three Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
library(plotly)
library(dplyr)
library(gridExtra)
library(vars)
library(GGally)
library(lmtest)
library(ggplot2)
library(tseries)
library(forecast)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Three Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
View(merged_data)
p <- ggpairs(merged_data, columns = c(2, 3, 4, 5, 6))
p
p <- ggpairs(merged_data, columns = c(2, 3, 4, 5, 6)) + ggtitle("Scatterplot Matrix of all variables")
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Trends in Gross Domestic Product, Real Disposable Income, and Consumer Price Index in the US',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPIR_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Trends in Consumer Price Index Rate and Unemployment Rate in the US',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = c(2, 3, 4, 5, 6)) + ggtitle("Scatterplot Matrix of all variables")
p
View(consumerPI_us)
View(merged_data)
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[4] <- "consumerPIR_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = c(2, 3, 4, 5, 6)) + ggtitle("Scatterplot Matrix of all variables")
p
plot(merged_data)
plot(merged_data[, -1])
cor(merged_data[,2:6])
View(consumerPI_us)
# Consumer Price Index Rate
data <- ts(consumerPI_us$Data, frequency = 12, start = c(1947, 1))
# Consumer Price Index Rate
data <- ts(consumerPI_us$DATA, frequency = 12, start = c(1947, 1))
autoplot(decompose(data)) + ggtitle("Decomposition of Consumer Price Index")
gglagplot(data, main = "16-lag plot of Consumer Price Index")
# Consumer Price Index Rate
data <- ts(consumerPI_us$RATE, frequency = 12, start = c(1947, 2))
autoplot(decompose(data)) + ggtitle("Decomposition of Consumer Price Index Rate")
gglagplot(data, main = "16-lag plot of Consumer Price Index Rate")
# Unemployment Rate
data <- ts(unemploymentR_us$DATA, frequency = 12, start = c(1976, 1))
autoplot(decompose(data)) + ggtitle("Decomposition of Unemployment Rate")
gglagplot(data, main = "16-lag plot of Unemployment Rate")
# Gross Domestic Product
data <- ts(grossDP_us$DATA, frequency = 12, start = c(1947, 1))
autoplot(decompose(data, type = 'multiplicative')) + ggtitle("Decomposition of Gross Domestic Product (Multiplicative)")
gglagplot(data, main = "16-lag plot of Gross Domestic Product")
# Real Disposable Income
data <- ts(realDI_us$DATA, frequency = 12, start = c(1951, 1))
autoplot(decompose(data, type = 'multiplicative')) + ggtitle("Decomposition of Real Disposable Income (Multiplicative)")
gglagplot(data, main = "16-lag plot of Real Disposable Income")
# Consumer Price Index Rate
data <- ts(consumerPI_us$RATE, frequency = 12, start = c(1947, 2))
autoplot(decompose(data)) + ggtitle("Decomposition of Consumer Price Index Rate")
gglagplot(data, main = "16-lag plot of Consumer Price Index Rate")
# Unemployment Rate
data <- ts(unemploymentR_us$DATA, frequency = 12, start = c(1976, 1))
autoplot(decompose(data)) + ggtitle("Decomposition of Unemployment Rate")
gglagplot(data, main = "16-lag plot of Unemployment Rate")
# Consumer Price Index Rate
data <- ts(consumerPI_us$DATA, frequency = 12, start = c(1947, 1))
autoplot(decompose(data, type = 'multiplicative')) + ggtitle("Decomposition of Consumer Price Index")
gglagplot(data, main = "16-lag plot of Consumer Price Index")
# Gross Domestic Product
data <- ts(grossDP_us$DATA, frequency = 12, start = c(1947, 1))
autoplot(decompose(data, type = 'multiplicative')) + ggtitle("Decomposition of Gross Domestic Product (Multiplicative)")
gglagplot(data, main = "16-lag plot of Gross Domestic Product")
# Real Disposable Income
data <- ts(realDI_us$DATA, frequency = 12, start = c(1951, 1))
autoplot(decompose(data, type = 'multiplicative')) + ggtitle("Decomposition of Real Disposable Income (Multiplicative)")
gglagplot(data, main = "16-lag plot of Real Disposable Income")
generate_plots <- function(data, title) {
# Original data plot
p1 <- autoplot(data) + ggtitle(paste("Original", title))
# Detrended data plot
detrended_data <- data - stl(data, s.window = "periodic")$time.series[, "trend"]
p2 <- autoplot(detrended_data) + ggtitle(paste("Detrended", title))
# First differenced data plot
first_differenced_data <- diff(data)
p3 <- autoplot(first_differenced_data) + ggtitle(paste("First Differenced", title))
# ACF plot for original data
p4 <- ggAcf(data) + ggtitle(paste("ACF of Original", title))
# PACF plot for original data
p5 <- ggPacf(data) + ggtitle(paste("PACF of Original", title))
# ACF plot for detrended data
p6 <- ggAcf(detrended_data) + ggtitle(paste("ACF of Detrended", title))
# PACF plot for detrended data
p7 <- ggPacf(detrended_data) + ggtitle(paste("PACF of Detrended", title))
# ACF plot for first differenced data
p8 <- ggAcf(first_differenced_data) + ggtitle(paste("ACF of First Differenced", title))
# PACF plot for first differenced data
p9 <- ggPacf(first_differenced_data) + ggtitle(paste("PACF of First Differenced", title))
# Combine plots into a single figure
grid.arrange(p1, p2, p3, p4, p6, p8, p5, p7, p9, ncol = 3, top = title)
}
remove_missing_values <- function(data) {
return(data[!is.na(data)])
}
# Consumer Price Index Rate
data_cpir <- ts(remove_missing_values(consumerPI_us$RATE), frequency = 12, start = c(1947, 2))
# Unemployment Rate
data_unemployment <- ts(remove_missing_values(unemploymentR_us$DATA), frequency = 12, start = c(1976, 1))
# Consumer Price Index
data_cpi <- ts(remove_missing_values(consumerPI_us$DATA), frequency = 12, start = c(1947, 1))
# Gross Domestic Product
data_gdp <- ts(remove_missing_values(grossDP_us$DATA), frequency = 12, start = c(1947, 1))
# Real Disposable Income
data_rdi <- ts(remove_missing_values(realDI_us$DATA), frequency = 12, start = c(1951, 1))
# Consumer Price Index Rate
generate_plots(data_cpir, "Consumer Price Index Rate")
# Unemployment Rate
generate_plots(data_unemployment, "Unemployment Rate")
# Consumer Price Index
generate_plots(data_cpi, "Consumer Price Index")
# Gross Domestic Product
generate_plots(data_gdp, "Gross Domestic Product")
# Real Disposable Income
generate_plots(data_rdi, "Real Disposable Income")
# Consumer Price Index Rate
adf_cpir <- adf.test(data_cpir)
print("ADF test for Consumer Price Index Rate")
print(adf_cpir)
# Unemployment Rate
adf_unemployment <- adf.test(data_unemployment)
print("ADF test for Unemployment Rate")
print(adf_unemployment)
# Consumer Price Index
adf_cpi <- adf.test(data_cpi)
print("ADF test for Consumer Price Index")
print(adf_cpi)
# Gross Domestic Product
adf_gdp <- adf.test(data_gdp)
print("ADF test for Gross Domestic Product")
print(adf_gdp)
# Real Disposable Income
adf_rdi <- adf.test(data_rdi)
print("ADF test for Real Disposable Income")
print(adf_rdi)
# Apply MA smoothing with window size 3
ma3 <- ma(data_cpi, order = 3)
plot(data_cpi, main = "Original Time Series Data")
lines(ma3, col = "red", lwd = 2)
# Apply MA smoothing with window size 12
ma12 <- ma(data_cpi, order = 12)
plot(data_cpi, main = "Original Time Series Data")
lines(ma12, col = "blue", lwd = 2)
# Apply MA smoothing with window size 24
ma24 <- ma(data_cpi, order = 24)
plot(data_cpi, main = "Original Time Series Data")
lines(ma24, col = "green", lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_cpir, order = 3)
ma12 <- ma(data_cpir, order = 12)
ma24 <- ma(data_cpir, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_cpir, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_cpir, order = 3)
ma12 <- ma(data_cpir, order = 12)
ma24 <- ma(data_cpir, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_cpir, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_unemployment, order = 3)
ma12 <- ma(data_unemployment, order = 12)
ma24 <- ma(data_unemployment, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_unemployment, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_cpi, order = 3)
ma12 <- ma(data_cpi, order = 12)
ma24 <- ma(data_cpi, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_cpi, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_gdp, order = 3)
ma12 <- ma(data_gdp, order = 12)
ma24 <- ma(data_gdp, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_gdp, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_rdi, order = 3)
ma12 <- ma(data_rdi, order = 12)
ma24 <- ma(data_rdi, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_rdi, main = "Original and MA Smoothed Time Series Data", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_cpir, order = 3)
ma12 <- ma(data_cpir, order = 12)
ma24 <- ma(data_cpir, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_cpir, main = "Consumer Price Index Rate", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_unemployment, order = 3)
ma12 <- ma(data_unemployment, order = 12)
ma24 <- ma(data_unemployment, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_unemployment, main = "Unemployment Rate", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_cpi, order = 3)
ma12 <- ma(data_cpi, order = 12)
ma24 <- ma(data_cpi, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_cpi, main = "Consumer Price Index", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_gdp, order = 3)
ma12 <- ma(data_gdp, order = 12)
ma24 <- ma(data_gdp, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_gdp, main = "GDP", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
# Apply MA smoothing with window size 3, 12, and 24
ma3 <- ma(data_rdi, order = 3)
ma12 <- ma(data_rdi, order = 12)
ma24 <- ma(data_rdi, order = 24)
# Plot original and smoothed time series data on the same graph
plot(data_rdi, main = "Real Dispoable Income", ylab = "Value")
lines(ma3, col = "red", lwd = 2)
lines(ma12, col = "blue", lwd = 2)
lines(ma24, col = "green", lwd = 2)
legend("topright", legend = c("Original", "MA(3)", "MA(12)", "MA(24)"), col = c("black", "red", "blue", "green"), lty = 1, lwd = 2)
library(plotly)
library(dplyr)
library(gridExtra)
library(vars)
library(GGally)
library(lmtest)
library(ggplot2)
library(tseries)
library(forecast)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
