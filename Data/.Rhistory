View(data_sorted)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_ts <- ts(data_sorted[, -1], start = data_sorted$Year[1], end = data_sorted$Year[nrow(data_sorted)], frequency = 12)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_ts <- ts(data_sorted[, -1], start = "1871-01-31", end = "2022-02-28", frequency = 12)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_ts <- ts(data_sorted[, -1], start = "c(1871, 1)", end = "c(2022, 2)", frequency = 12)
data_sorted[, -1]
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_ts <- ts(data_sorted[, -1], start = "c(1871, 1)", end = "c(2022, 2)", frequency = 12)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(ggplot2)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(ggplot2)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_ts <- ts(data_sorted[, -1], start = "c(1871, 1)", end = "c(2022, 2)", frequency = 12)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
data_ts <- ts(data_sorted[, -1], start = "c(1871, 1)", end = "c(2022, 12)", frequency = 12)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
data_ts <- ts(data_sorted[, -1], start = c(1871, 1), end = c(2022, 12), frequency = 12)
data_long <- data.frame(
time = rep(data$time, ncol(data) - 1),
series = factor(c(rep("series1", nrow(data)), rep("series2", nrow(data)), rep("series3", nrow(data)))),
value = c(data$series1, data$series2, data$series3)
)
# Convert the data frame to a long format
data_long <- reshape2::melt(data_ts, id.vars = "time", variable.name = "series", value.name = "value")
# Plot the time series using Plotly
plot_ly(data_long, x = ~time, y = ~value, color = ~series, type = "scatter", mode = "lines") %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
View(data_long)
library(tidyverse)
library(plotly)
# Convert the data frame to a long format
data_long <- reshape2::melt(data_ts, id.vars = "time", variable.name = "series", value.name = "value")
# Plot the time series using Plotly
plot_ly(data_long, x = ~time, y = ~value, color = ~series, type = "scatter", mode = "lines") %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
plot_ly(data = data_sorted, x = data_sorted$Year, y = data_sorted[, -1])
data_sorted[, -1]
View(data_sorted)
fig = px.line(data_sorted, x=data_sorted['year'], y=data_sorted['S.P.Composite'])
plot <- plot_ly(data_sorted, x = ~time, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
plot <- plot_ly(data_sorted, x = ~time, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
plot <- plot_ly(data_sorted, x = ~Year, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(plotly)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(plotly)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
plot <- plot_ly(data_sorted, x = ~Year, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data_ts <- ts(data_sorted[, -1], start = c(1871, 1), end = c(2022, 12), frequency = 12)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(plotly)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
plot <- plot_ly(data_sorted, x = ~Year, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data_ts <- ts(data_sorted[, -1], start = c(1871, 1), end = c(2022, 12), frequency = 12)
# Calculate VIF
vif_values <- vif(model)
library(tidyverse)
library(plotly)
library(car)
install.packages("car")
library(tidyverse)
library(plotly)
library(car)
data <- read.csv("SPCOMP.csv")
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
plot <- plot_ly(data_sorted, x = ~Year, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data_ts <- ts(data_sorted[, -1], start = c(1871, 1), end = c(2022, 12), frequency = 12)
# Calculate VIF
vif_values <- vif(model)
# Print VIF values
print(vif_values)
data <- read.csv("SPCOMP.csv")
library(tidyverse)
library(plotly)
library(car)
data$Year <- as.Date(data$Year, format = "%Y-%m-%d")
data[, -1] <- lapply(data[, -1], as.numeric)
data_sorted <- data[order(data$Year), ]
plot <- plot_ly(data_sorted, x = ~Year, y = ~data_sorted[[2]], name = colnames(data_sorted)[2], type = "scatter", mode = "lines")
# Loop through the remaining columns and add traces
for (i in 3:ncol(data_sorted)) {
plot <- plot %>% add_trace(y = ~data_sorted[[i]], name = colnames(data_sorted)[i], mode = "lines")
}
# Customize the layout
plot <- plot %>%
layout(title = "Multiple Time Series",
xaxis = list(title = "Time"),
yaxis = list(title = "Value"))
# Display the plot
plot
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
# data_ts <- ts(data_sorted[, -1], start = c(1871, 1), end = c(2022, 12), frequency = 12)
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
# Calculate VIF
vif_values <- vif(model)
# Print VIF values
print(vif_values)
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data_sorted <- subset(data_sorted, select = -Dividend)
data_sorted <- subset(data_sorted, select = -Earnings)
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Real.Dividend)
data_sorted <- subset(data_sorted, select = -Real.Earnings)
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
residuals_values <- residuals(model)
plot(residuals_values, main = "Residuals Plot", ylab = "Residuals")
# Plot the ACF of residuals
acf(residuals_values, main = "Autocorrelation Function (ACF) of Residuals")
# Plot the PACF of residuals
pacf(residuals_values, main = "Partial Autocorrelation Function (PACF) of Residuals")
# Plot the ACF of residuals
acf(residuals_values, main = "Autocorrelation Function (ACF) of Residuals")
# Plot the PACF of residuals
pacf(residuals_values, main = "Partial Autocorrelation Function (PACF) of Residuals")
# Plot the ACF of residuals
acf(residuals_values^2, main = "Autocorrelation Function (ACF) of Squared Residuals")
# Plot the PACF of residuals
pacf(residuals_values^2, main = "Partial Autocorrelation Function (PACF) of Squared Residuals")
library(tidyverse)
library(plotly)
library(car)
library(tseries)
install.packages("urca")
library(tidyverse)
library(plotly)
library(car)
library(tseries)
library(urca)
adf.test(residuals_values)
ur.pp(residuals_values)
adf.test(residuals_values^2)
ur.pp(residuals_values^2)
differenced_res <- diff(residuals, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res_squared <- diff(residuals_values^2, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res_squared <- diff(residuals_values^2, differences=1)
acf(differenced_res, main = "Autocorrelation Function (ACF) of 1st differenced Residuals")
acf(differenced_res_squared^2, main = "Autocorrelation Function (ACF) of 1st differenced Squared Residuals")
adf.test(differenced_res)
adf.test(differenced_res_squared^2)
auto.arima(differenced_res)
library(tidyverse)
library(plotly)
library(forecast)
library(car)
library(tseries)
library(urca)
auto.arima(differenced_res)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
library(tidyverse)
library(plotly)
library(forecast)
library(rugarch)
library(car)
library(tseries)
library(urca)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,4)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,4)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
summary(garch.model)
library(TSA)
data(usd.hkd)
returns=ts(usd.hkd$r,freq=1)
plot(ts(usd.hkd$r,freq=1),type='l',xlab='Day',ylab='Return')
library(astsa)
library(car)
library(fma)
library(forecast)
library(fpp2)
library(ggplot2)
library(lubridate)
library(plotly)
library(rugarch)
library(tidyquant)
library(tidyverse)
library(TSstudio)
library(tseries)
library(xts)
library(quantmod)
library(TSA)
data(usd.hkd)
returns=ts(usd.hkd$r,freq=1)
plot(ts(usd.hkd$r,freq=1),type='l',xlab='Day',ylab='Return')
View(usd.hkd)
View(data_sorted)
acf(ts(usd.hkd$r,freq=1))
acf(returns)
pacf(returns)
acf(returns)
pacf(returns)
acf.test(returns)
acf(returns)
pacf(returns)
adf.test(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
Box.test(arima.res, lag = 10, type = "Ljung-Box")
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima.model2 <- arima(returns, order = c(2,0,2))
# Print the model summary
summary(arima.model2)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima(returns, order = c(2,0,2)))
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima(returns, order = c(2,0,2)))
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- auto.arima(arima(returns, order = c(2,0,2)))
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- arima(returns, order = c(2,0,2))
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
Box.test(arima.res, lag = 10, type = "Ljung-Box")
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- arima(returns, order = c(2,0,2))
arima.res <- resid(model_arima)
plot(arima.res)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
View(usd.hkd)
lm(formula = r ~ day, data = returns)
lm(formula = r ~ day, data = usd.hkd)
# Define the AR(1) + GARCH(3,1) model specification
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(1,0), include.mean = TRUE))
# Fit the model to the time series data
fit2 <- ugarchfit(spec = spec, data = arima.res)
# Define the AR(1) + GARCH(3,1) model specification
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(1,0), include.mean = TRUE))
# Fit the model to the time series data
fit2 <- ugarchfit(spec = spec, data = arima.res)
show(fit2)
show(garch.model)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
library(plotly)
library(dplyr)
library(GGally)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = c(2,3,5,6))
p
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
library(plotly)
library(dplyr)
library(GGally)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
library(plotly)
library(dplyr)
library(GGally)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = c(2,3,5,6))
p
plot(merged_data)
cor(merged_data)
View(merged_data)
cor(merged_data[,2:6])
data_standardized <- scale(merged_data[,2:6])
View(data_standardized)
View(data_standardized)
model <- lm(unemploymentR_us ~ ., data = data_standardized)
View(data_standardized)
data_standardized <- data.frame(data_standardized)
model <- lm(unemploymentR_us ~ ., data = data_standardized)
summary(model)
# Load the caret package
library(caret)
install.packages("caret")
# Load the caret package
library(caret)
# Create the train-test split
set.seed(123)
index <- createDataPartition(data_standardized$unemploymentR_us, p = 0.8, list = FALSE)
train_data <- data_standardized[index, ]
test_data <- data_standardized[-index, ]
# Fit the linear regression model on the training data
model <- lm(unemploymentR_us ~ ., data = data_standardized)
# Make predictions on the test data
predictions <- predict(model, newdata = test_data)
# Calculate the MAE on the test data
mae <- mean(abs(predictions - test_data$unemploymentR_us))
library(keras)
install.packages("keras")
library(keras)
model <- keras_model_sequential()
Y
library(keras)
model <- keras_model_sequential()
View(merged_data)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
library(plotly)
library(dplyr)
library(GGally)
setwd("~/Coding/Grad/Anly_560/unemployment-rate-ts-analysis-anly-560-final-project/Data")
grossDP_us <- read.csv("Gross Domestic Product US.csv")
