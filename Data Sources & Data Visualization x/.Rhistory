vif_values <- vif(model)
# Print VIF values
print(vif_values)
data_sorted <- subset(data_sorted, select = -Long.Interest.Rate)
data_sorted <- subset(data_sorted, select = -Dividend)
data_sorted <- subset(data_sorted, select = -Earnings)
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
data_sorted <- subset(data_sorted, select = -Real.Dividend)
data_sorted <- subset(data_sorted, select = -Real.Earnings)
model <- lm(formula = S.P.Composite ~ ., data = data_sorted)
summary(lm(formula = S.P.Composite ~ ., data = data_sorted))
residuals_values <- residuals(model)
plot(residuals_values, main = "Residuals Plot", ylab = "Residuals")
# Plot the ACF of residuals
acf(residuals_values, main = "Autocorrelation Function (ACF) of Residuals")
# Plot the PACF of residuals
pacf(residuals_values, main = "Partial Autocorrelation Function (PACF) of Residuals")
# Plot the ACF of residuals
acf(residuals_values, main = "Autocorrelation Function (ACF) of Residuals")
# Plot the PACF of residuals
pacf(residuals_values, main = "Partial Autocorrelation Function (PACF) of Residuals")
# Plot the ACF of residuals
acf(residuals_values^2, main = "Autocorrelation Function (ACF) of Squared Residuals")
# Plot the PACF of residuals
pacf(residuals_values^2, main = "Partial Autocorrelation Function (PACF) of Squared Residuals")
library(tidyverse)
library(plotly)
library(car)
library(tseries)
install.packages("urca")
library(tidyverse)
library(plotly)
library(car)
library(tseries)
library(urca)
adf.test(residuals_values)
ur.pp(residuals_values)
adf.test(residuals_values^2)
ur.pp(residuals_values^2)
differenced_res <- diff(residuals, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res_squared <- diff(residuals_values^2, differences=1)
differenced_res <- diff(residuals_values, differences=1)
differenced_res_squared <- diff(residuals_values^2, differences=1)
acf(differenced_res, main = "Autocorrelation Function (ACF) of 1st differenced Residuals")
acf(differenced_res_squared^2, main = "Autocorrelation Function (ACF) of 1st differenced Squared Residuals")
adf.test(differenced_res)
adf.test(differenced_res_squared^2)
auto.arima(differenced_res)
library(tidyverse)
library(plotly)
library(forecast)
library(car)
library(tseries)
library(urca)
auto.arima(differenced_res)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
library(tidyverse)
library(plotly)
library(forecast)
library(rugarch)
library(car)
library(tseries)
library(urca)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,4)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
model_arima <- auto.arima(differenced_res)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,4)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
summary(garch.model)
library(TSA)
data(usd.hkd)
returns=ts(usd.hkd$r,freq=1)
plot(ts(usd.hkd$r,freq=1),type='l',xlab='Day',ylab='Return')
library(astsa)
library(car)
library(fma)
library(forecast)
library(fpp2)
library(ggplot2)
library(lubridate)
library(plotly)
library(rugarch)
library(tidyquant)
library(tidyverse)
library(TSstudio)
library(tseries)
library(xts)
library(quantmod)
library(TSA)
data(usd.hkd)
returns=ts(usd.hkd$r,freq=1)
plot(ts(usd.hkd$r,freq=1),type='l',xlab='Day',ylab='Return')
View(usd.hkd)
View(data_sorted)
acf(ts(usd.hkd$r,freq=1))
acf(returns)
pacf(returns)
acf(returns)
pacf(returns)
acf.test(returns)
acf(returns)
pacf(returns)
adf.test(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
Box.test(arima.res, lag = 10, type = "Ljung-Box")
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima.model2 <- arima(returns, order = c(2,0,2))
# Print the model summary
summary(arima.model2)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(5,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima(returns, order = c(2,0,2)))
auto.arima(returns)
model_arima <- auto.arima(returns)
arima.res <- resid(model_arima)
# Fit an ARIMA(2,0,2) model to the time series data
arima(returns, order = c(2,0,2))
# Print the model summary
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima(returns, order = c(2,0,2)))
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- auto.arima(arima(returns, order = c(2,0,2)))
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- arima(returns, order = c(2,0,2))
arima.res <- resid(model_arima)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
Box.test(arima.res, lag = 10, type = "Ljung-Box")
auto.arima(returns)
arima(returns, order = c(2,0,2))
# We are going to go with (2, 0, 2)
model_arima <- arima(returns, order = c(2,0,2))
arima.res <- resid(model_arima)
plot(arima.res)
garch.spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1,1)), mean.model = list(armaOrder = c(2,2)))
garch.model <- ugarchfit(spec = garch.spec, data = arima.res)
View(usd.hkd)
lm(formula = r ~ day, data = returns)
lm(formula = r ~ day, data = usd.hkd)
# Define the AR(1) + GARCH(3,1) model specification
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(1,0), include.mean = TRUE))
# Fit the model to the time series data
fit2 <- ugarchfit(spec = spec, data = arima.res)
# Define the AR(1) + GARCH(3,1) model specification
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(3,1)),
mean.model = list(armaOrder = c(1,0), include.mean = TRUE))
# Fit the model to the time series data
fit2 <- ugarchfit(spec = spec, data = arima.res)
show(fit2)
show(garch.model)
unER_us <- read.csv("Unemployment Data US.csv")
unER_us <- read.csv("Unemployment Data US.csv")
unER_us <- read.csv("Unemployment Data US.csv")
setwd("C:/Users/sakur/Downloads/final_project/Data Sources & Data Visualization")
unER_us <- read.csv("Unemployment Data US.csv")
grossDP <- read.csv("GDP.csv")
unER_us <- read.csv("Unemployment Data US.csv")
grossDP <- read.csv("GDP US.csv")
inflationRate_us <- read.csv("Inflation Rate US.csv")
realDisposablePersonalIncome_us <- read.csv("Real Disposable Personal Income US.csv")
View(grossDP)
View(inflationRate_us)
grossDP_us <- read.csv("GDP US.csv")
iR_us <- read.csv("Inflation Rate US.csv")
rDI_us <- read.csv("Real Disposable Personal Income US.csv")
unER_us <- read.csv("Unemployment Data US.csv")
grossDP_us <- read.csv("GDP US.csv")
inflationR_us <- read.csv("Inflation Rate US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Data US.csv")
grossDP_us <- read.csv("GDP US.csv")
inflationR_us <- read.csv("Inflation Rate US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Data US.csv")
grossDP_us <- read.csv("GDP US.csv")
inflationR_us <- read.csv("Inflation Rate US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Data US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
inflationR_us$DATE <- as.Date(inflationR_us$DATE)
View(inflationR_us)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
inflationR_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
inflationR_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
inflationR_us$DATE <- as.Date(inflationR_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
View(grossDP_us)
View(inflationR_us)
View(realDI_us)
View(unemploymentR_us)
colnames(grossDP_us)[2] <- "DATA"
colnames(inflationR_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
View(consumerPI_us)
View(grossDP_us)
View(realDI_us)
View(unemploymentR_us)
library(plotly)
p <- plot_ly(x = ~consumerPI_us$DATE, y = ~consumerPI_us$DATA, type = 'scatter', mode = 'lines', name = 'Series 1') %>%
add_trace(x = ~unemploymentR_us$DATE, y = ~unemploymentR_us$DATA, mode = 'lines', name = 'Series 2') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'X-Axis Label'),
yaxis = list(title = 'Y-Axis Label'))
library(plotly)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
p <- plot_ly(x = ~consumerPI_us$DATE, y = ~consumerPI_us$DATA, type = 'scatter', mode = 'lines', name = 'Series 1') %>%
add_trace(x = ~unemploymentR_us$DATE, y = ~unemploymentR_us$DATA, mode = 'lines', name = 'Series 2') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'X-Axis Label'),
yaxis = list(title = 'Y-Axis Label'))
p
library(plotly)
library(dplyr)
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (value - lag(value)) / lag(value) * 100)
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(x = ~consumerPI_us$RATE, y = ~consumerPI_us$DATA, type = 'scatter', mode = 'lines', name = 'Series 1') %>%
add_trace(x = ~unemploymentR_us$DATE, y = ~unemploymentR_us$DATA, mode = 'lines', name = 'Series 2') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'X-Axis Label'),
yaxis = list(title = 'Y-Axis Label'))
p
p <- plot_ly(x = ~consumerPI_us$RATE, y = ~consumerPI_us$DATA, name = 'consumerPI_us') %>%
add_trace(x = ~unemploymentR_us$DATE, y = ~unemploymentR_us$DATA, name = 'unemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'X-Axis Label'),
yaxis = list(title = 'Y-Axis Label'))
p
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
combined_data <- bind_rows(grossDP_us, realDI_us)
View(combined_data)
grossDP_us <- grossDP_us(Group = "A")
grossDP_us$GROUP <- 'grossDP_us'
View(grossDP_us)
grossDP_us$GROUP <- 'grossDP_us'
consumerPI_us$GROUP <- 'consumerPI_us'
realDI_us$GROUP <- 'realDI_us'
unemploymentR_us$GROUP <- 'unemploymentR_us'
grossDP_us$GROUP <- 'grossDP_us'
consumerPI_us$GROUP <- 'consumerPI_us'
realDI_us$GROUP <- 'realDI_us'
unemploymentR_us$GROUP <- 'unemploymentR_us'
combined_data <- bind_rows(grossDP_us, consumerPI_us, unemploymentR_us)
View(unemploymentR_us)
View(unemploymentR_us)
View(combined_data)
grossDP_us$GROUP <- 'grossDP_us'
consumerPI_us$GROUP <- 'consumerPI_us'
realDI_us$GROUP <- 'realDI_us'
unemploymentR_us$GROUP <- 'unemploymentR_us'
combined_data <- bind_rows(grossDP_us, realDI_us, unemploymentR_us)
p <- ggpairs(combined_data, columns = 1:2, mapping = ggplot2::aes(color = Group))
library(plotly)
library(dplyr)
library(GGally)
install.packages("GGally")
library(plotly)
library(dplyr)
library(GGally)
p <- ggpairs(combined_data, columns = 1:2, mapping = ggplot2::aes(color = Group))
p
p <- ggpairs(combined_data, columns = 1:2, mapping = ggplot2::aes(color = GROUP))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
View(merged_data)
library(plotly)
library(dplyr)
library(GGally)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
View(merged_data)
View(consumerPI_us)
View(grossDP_us)
View(merged_data)
View(grossDP_us)
View(realDI_us)
View(unemploymentR_us)
p <- ggpairs(merged_data, columns = 2:5)
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(data)[2] <- "grossDP_us"
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[4] <- "realDI_us"
colnames(merged_data)[5] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = 2:5)
p
library(plotly)
library(dplyr)
library(GGally)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPI_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
layout(title = 'Two Data Series on the Same Plot',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = 2:5)
p
p <- ggpairs(merged_data, columns = 2,3,5,6)
p <- ggpairs(merged_data, columns = c(2,3,5,6))
p
plot(merged_data)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
library(plotly)
library(dplyr)
library(GGally)
library(plotly)
library(dplyr)
library(gridExtra)
library(vars)
library(GGally)
library(lmtest)
library(ggplot2)
library(tseries)
library(forecast)
grossDP_us <- read.csv("Gross Domestic Product US.csv")
consumerPI_us <- read.csv("Consumer Price Index US.csv")
realDI_us <- read.csv("Real Disposable Personal Income US.csv")
unemploymentR_us <- read.csv("Unemployment Rate US.csv")
grossDP_us$DATE <- as.Date(grossDP_us$DATE)
consumerPI_us$DATE <- as.Date(consumerPI_us$DATE)
realDI_us$DATE <- as.Date(realDI_us$DATE)
unemploymentR_us$DATE <- as.Date(unemploymentR_us$DATE)
colnames(grossDP_us)[2] <- "DATA"
colnames(consumerPI_us)[2] <- "DATA"
colnames(realDI_us)[2] <- "DATA"
colnames(unemploymentR_us)[2] <- "DATA"
consumerPI_us <- consumerPI_us %>%
mutate(RATE = (DATA - lag(DATA)) / lag(DATA) * 100)
p <- plot_ly(data = consumerPI_us, x = ~DATE, y = ~RATE, type = 'scatter', mode = 'lines+markers', name = 'ConsumerPIR_us') %>%
add_trace(data = unemploymentR_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'UnemploymentR_us') %>%
layout(title = 'Trends in Consumer Price Index Rate and Unemployment Rate in the US',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
p <- plot_ly(data = grossDP_us, x = ~DATE, y = ~DATA, type = 'scatter', mode = 'lines+markers', name = 'grossDP_us') %>%
add_trace(data = realDI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'realDI_us') %>%
add_trace(data = consumerPI_us, x = ~DATE, y = ~DATA, mode = 'lines+markers', name = 'consumerPI_us') %>%
layout(title = 'Trends in Gross Domestic Product, Real Disposable Income, and Consumer Price Index in the US',
xaxis = list(title = 'Date'),
yaxis = list(title = 'Value'))
p
merged_data <- Reduce(function(x, y) merge(x, y, by = "DATE"), list(grossDP_us, consumerPI_us, realDI_us, unemploymentR_us))
colnames(merged_data)[2] <- "grossDP_us"
colnames(merged_data)[3] <- "consumerPI_us"
colnames(merged_data)[4] <- "consumerPIR_us"
colnames(merged_data)[5] <- "realDI_us"
colnames(merged_data)[6] <- "unemploymentR_us"
p <- ggpairs(merged_data, columns = c(2, 3, 4, 5, 6)) + ggtitle("Scatterplot Matrix of all variables")
p
